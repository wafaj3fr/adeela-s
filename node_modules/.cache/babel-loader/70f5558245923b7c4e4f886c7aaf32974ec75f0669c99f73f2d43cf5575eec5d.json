{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WebMercatorViewport, { normalizeViewportProps } from 'viewport-mercator-project';\nimport { TransitionInterpolator } from './transition';\nimport { clamp } from './math-utils';\nimport assert from './assert';\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\nvar MapState = function () {\n  function MapState(_ref) {\n    var width = _ref.width,\n      height = _ref.height,\n      latitude = _ref.latitude,\n      longitude = _ref.longitude,\n      zoom = _ref.zoom,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n      _ref$altitude = _ref.altitude,\n      altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n      _ref$maxZoom = _ref.maxZoom,\n      maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n      _ref$minZoom = _ref.minZoom,\n      minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n      _ref$minPitch = _ref.minPitch,\n      minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n      transitionDuration = _ref.transitionDuration,\n      transitionEasing = _ref.transitionEasing,\n      transitionInterpolator = _ref.transitionInterpolator,\n      transitionInterruption = _ref.transitionInterruption,\n      startPanLngLat = _ref.startPanLngLat,\n      startZoomLngLat = _ref.startZoomLngLat,\n      startBearing = _ref.startBearing,\n      startPitch = _ref.startPitch,\n      startZoom = _ref.startZoom;\n    _classCallCheck(this, MapState);\n    _defineProperty(this, \"_viewportProps\", void 0);\n    _defineProperty(this, \"_interactiveState\", void 0);\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    this._viewportProps = this._applyConstraints({\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      transitionDuration: transitionDuration,\n      transitionEasing: transitionEasing,\n      transitionInterpolator: transitionInterpolator,\n      transitionInterruption: transitionInterruption\n    });\n    this._interactiveState = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n  }\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedMapState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n        startPos = _ref3.startPos;\n      var startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n      if (!startPanLngLat) {\n        return this;\n      }\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n          startPanLngLat: startPanLngLat,\n          pos: pos\n        }),\n        _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n        longitude = _this$_calculateNewLn2[0],\n        latitude = _this$_calculateNewLn2[1];\n      return this._getUpdatedMapState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedMapState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedMapState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var _ref5$deltaScaleX = _ref5.deltaScaleX,\n        deltaScaleX = _ref5$deltaScaleX === void 0 ? 0 : _ref5$deltaScaleX,\n        _ref5$deltaScaleY = _ref5.deltaScaleY,\n        deltaScaleY = _ref5$deltaScaleY === void 0 ? 0 : _ref5$deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n        startBearing = _this$_interactiveSta.startBearing,\n        startPitch = _this$_interactiveSta.startPitch;\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n      var _this$_calculateNewPi = this._calculateNewPitchAndBearing({\n          deltaScaleX: deltaScaleX,\n          deltaScaleY: deltaScaleY,\n          startBearing: startBearing || 0,\n          startPitch: startPitch || 0\n        }),\n        pitch = _this$_calculateNewPi.pitch,\n        bearing = _this$_calculateNewPi.bearing;\n      return this._getUpdatedMapState({\n        bearing: bearing,\n        pitch: pitch\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedMapState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedMapState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n        startPos = _ref7.startPos,\n        scale = _ref7.scale;\n      assert(scale > 0, '`scale` must be a positive number');\n      var _this$_interactiveSta2 = this._interactiveState,\n        startZoom = _this$_interactiveSta2.startZoom,\n        startZoomLngLat = _this$_interactiveSta2.startZoomLngLat;\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n      assert(startZoomLngLat, '`startZoomLngLat` prop is required ' + 'for zoom behavior to calculate where to position the map.');\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom || 0\n      });\n      var zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {\n        zoom: zoom\n      }));\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n          lngLat: startZoomLngLat,\n          pos: pos\n        }),\n        _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n        longitude = _zoomedViewport$getMa2[0],\n        latitude = _zoomedViewport$getMa2[1];\n      return this._getUpdatedMapState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedMapState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"_getUpdatedMapState\",\n    value: function _getUpdatedMapState(newProps) {\n      return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n        minZoom = props.minZoom,\n        zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n        minPitch = props.minPitch,\n        pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n        pos = _ref8.pos;\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n        startZoom = _ref9.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n        maxZoom = _this$_viewportProps.maxZoom,\n        minZoom = _this$_viewportProps.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n        deltaScaleY = _ref10.deltaScaleY,\n        startBearing = _ref10.startBearing,\n        startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps2 = this._viewportProps,\n        minPitch = _this$_viewportProps2.minPitch,\n        maxPitch = _this$_viewportProps2.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }]);\n  return MapState;\n}();\nexport { MapState as default };","map":{"version":3,"names":["WebMercatorViewport","normalizeViewportProps","TransitionInterpolator","clamp","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","_ref","width","height","latitude","longitude","zoom","_ref$bearing","_ref$pitch","_ref$altitude","_ref$maxZoom","_ref$minZoom","_ref$maxPitch","_ref$minPitch","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","_classCallCheck","_defineProperty","Number","isFinite","_viewportProps","_applyConstraints","_interactiveState","pos","_ref2","_getUpdatedMapState","_unproject","_ref3","startPos","_this$_calculateNewLn","_calculateNewLngLat","_this$_calculateNewLn2","_slicedToArray","_ref4","_ref5$deltaScaleX","_ref5","deltaScaleX","_ref5$deltaScaleY","deltaScaleY","_this$_interactiveSta","_this$_calculateNewPi","_calculateNewPitchAndBearing","_ref6","_ref7","scale","_this$_interactiveSta2","_calculateNewZoom","zoomedViewport","Object","assign","_zoomedViewport$getMa","getMapCenterByLngLatPosition","lngLat","_zoomedViewport$getMa2","newProps","props","viewport","unproject","_ref8","_ref9","_this$_viewportProps","Math","log2","_ref10","_this$_viewportProps2"],"sources":["/home/hp/adeela_map/adeela/node_modules/react-map-gl/src/utils/map-state.js"],"sourcesContent":["// @flow\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {TransitionInterpolator} from './transition';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\ntype ViewportProps = {\n  width: number,\n  height: number,\n  latitude: number,\n  longitude: number,\n  zoom: number,\n  bearing: number,\n  pitch: number,\n  altitude: number,\n  maxZoom: number,\n  minZoom: number,\n  maxPitch: number,\n  minPitch: number,\n  transitionDuration: number,\n  transitionEasing: number => number,\n  transitionInterpolator: TransitionInterpolator,\n  transitionInterruption: number\n};\n\ntype InteractiveState = {\n  startPanLngLat?: Array<number>,\n  startZoomLngLat?: Array<number>,\n  startBearing?: number,\n  startPitch?: number,\n  startZoom?: number\n};\n\nexport type MapStateProps = ViewportProps &\n  InteractiveState & {\n    altitude?: number,\n    maxZoom?: number,\n    minZoom?: number,\n    maxPitch?: number,\n    minPitch?: number\n  };\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }: MapStateProps) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  _viewportProps: ViewportProps;\n  _interactiveState: InteractiveState;\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: Array<number>, startPos?: Array<number>}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}: {deltaScaleX?: number, deltaScaleY?: number}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing: startBearing || 0,\n      startPitch: startPitch || 0\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}: {pos: Array<number>, startPos?: Array<number>, scale: number}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    // $FlowFixMe\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps: any): MapState {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props: ViewportProps): ViewportProps {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos: ?Array<number>): ?Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({\n    startPanLngLat,\n    pos\n  }: {\n    startPanLngLat: Array<number>,\n    pos: Array<number>\n  }): Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}: {scale: number, startZoom: number}): number {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({\n    deltaScaleX,\n    deltaScaleY,\n    startBearing,\n    startPitch\n  }: {\n    deltaScaleX: number,\n    deltaScaleY: number,\n    startBearing: number,\n    startPitch: number\n  }) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}