{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { document } from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  className: PropTypes.string,\n  container: PropTypes.object\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null\n});\nvar FullscreenControl = function (_BaseControl) {\n  _inherits(FullscreenControl, _BaseControl);\n  function FullscreenControl() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, FullscreenControl);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FullscreenControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFullscreen: false,\n      showButton: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_mapboxFullscreenControl\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_onFullscreenChange\", function () {\n      var nextState = !_this._mapboxFullscreenControl._fullscreen;\n      _this._mapboxFullscreenControl._fullscreen = nextState;\n      _this.setState({\n        isFullscreen: nextState\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onClickFullscreen\", function () {\n      _this._mapboxFullscreenControl._onClickFullscreen();\n    });\n    return _this;\n  }\n  _createClass(FullscreenControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var container = this.props.container || this._context.mapContainer;\n      this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n        container: container\n      });\n      this.setState({\n        showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n      });\n      document.addEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"_renderButton\",\n    value: function _renderButton(type, label, callback) {\n      return React.createElement(\"button\", {\n        key: type,\n        className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n        type: \"button\",\n        title: label,\n        onClick: callback\n      });\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (!this.state.showButton) {\n        return null;\n      }\n      var className = this.props.className;\n      var isFullscreen = this.state.isFullscreen;\n      var type = isFullscreen ? 'shrink' : 'fullscreen';\n      return React.createElement(\"div\", {\n        className: \"mapboxgl-ctrl mapboxgl-ctrl-group \".concat(className),\n        ref: this._containerRef\n      }, this._renderButton(type, 'Toggle fullscreen', this._onClickFullscreen));\n    }\n  }]);\n  return FullscreenControl;\n}(BaseControl);\n_defineProperty(FullscreenControl, \"propTypes\", propTypes);\n_defineProperty(FullscreenControl, \"defaultProps\", defaultProps);\nexport { FullscreenControl as default };","map":{"version":3,"names":["document","PropTypes","BaseControl","React","mapboxgl","propTypes","Object","assign","className","string","container","object","defaultProps","FullscreenControl","isFullscreen","showButton","nextState","_this","_mapboxFullscreenControl","_fullscreen","setState","_onClickFullscreen","props","_context","mapContainer","_checkFullscreenSupport","addEventListener","_fullscreenchange","_onFullscreenChange","removeEventListener","type","label","callback","createElement","key","concat","title","onClick","state","ref","_containerRef","_renderButton"],"sources":["/home/hp/adeela_map/adeela/node_modules/react-map-gl/src/components/fullscreen-control.js"],"sourcesContent":["// @flow\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport type {BaseControlProps} from './base-control';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null\n});\n\nexport type FullscreenControlProps = BaseControlProps & {\n  className: string,\n  container: ?HTMLElement\n};\n\ntype State = {\n  isFullscreen: boolean,\n  showButton: boolean\n};\n\nexport default class FullscreenControl extends BaseControl<\n  FullscreenControlProps,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    isFullscreen: false,\n    showButton: false\n  };\n\n  _mapboxFullscreenControl: any = null;\n\n  componentDidMount() {\n    const container = this.props.container || this._context.mapContainer;\n\n    this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n      container\n    });\n\n    // eslint-disable-next-line\n    this.setState({\n      showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n    });\n\n    document.addEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  _onFullscreenChange = () => {\n    const nextState = !this._mapboxFullscreenControl._fullscreen;\n    // this is a hack\n    // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n    this._mapboxFullscreenControl._fullscreen = nextState;\n    this.setState({isFullscreen: nextState});\n  };\n\n  _onClickFullscreen = () => {\n    this._mapboxFullscreenControl._onClickFullscreen();\n  };\n\n  _renderButton(type: string, label: string, callback: Function) {\n    return (\n      <button\n        key={type}\n        className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n        type=\"button\"\n        title={label}\n        onClick={callback}\n      />\n    );\n  }\n\n  _render() {\n    if (!this.state.showButton) {\n      return null;\n    }\n\n    const {className} = this.props;\n    const {isFullscreen} = this.state;\n\n    const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n    return (\n      <div className={`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`} ref={this._containerRef}>\n        {this._renderButton(type, 'Toggle fullscreen', this._onClickFullscreen)}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;AAsBA,SAAQA,QAAR,QAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAIA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAW,CAACG,SAA9B,EAAyC;EAEzDG,SAAS,EAAEP,SAAS,CAACQ,MAFoC;EAOzDC,SAAS,EAAET,SAAS,CAACU;AAPoC,CAAzC,CAAlB;AAUA,IAAMC,YAAY,GAAGN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAW,CAACU,YAA9B,EAA4C;EAC/DJ,SAAS,EAAE,EADoD;EAE/DE,SAAS,EAAE;AAFoD,CAA5C,CAArB;IAeqBG,iB;;;;;;;;;;4DAQX;MACNC,YAAY,EAAE,KADR;MAENC,UAAU,EAAE;IAFN,C;+EAKwB,I;0EA2BV,YAAM;MAC1B,IAAMC,SAAS,GAAG,CAACC,KAAA,CAAKC,wBAAL,CAA8BC,WAAjD;MAGAF,KAAA,CAAKC,wBAAL,CAA8BC,WAA9B,GAA4CH,SAA5C;MACAC,KAAA,CAAKG,QAAL,CAAc;QAACN,YAAY,EAAEE;MAAf,CAAd;IACD,C;yEAEoB,YAAM;MACzBC,KAAA,CAAKC,wBAAL,CAA8BG,kBAA9B;IACD,C;;;;;wCAnCmB;MAClB,IAAMX,SAAS,GAAG,KAAKY,KAAL,CAAWZ,SAAX,IAAwB,KAAKa,QAAL,CAAcC,YAAxD;MAEA,KAAKN,wBAAL,GAAgC,IAAId,QAAQ,CAACS,iBAAb,CAA+B;QAC7DH,SAAS,EAATA;MAD6D,CAA/B,CAAhC;MAKA,KAAKU,QAAL,CAAc;QACZL,UAAU,EAAE,KAAKG,wBAAL,CAA8BO,uBAA9B;MADA,CAAd;MAIAzB,QAAQ,CAAC0B,gBAAT,CACE,KAAKR,wBAAL,CAA8BS,iBADhC,EAEE,KAAKC,mBAFP;IAID;;;2CAEsB;MACrB5B,QAAQ,CAAC6B,mBAAT,CACE,KAAKX,wBAAL,CAA8BS,iBADhC,EAEE,KAAKC,mBAFP;IAID;;;kCAcaE,I,EAAcC,K,EAAeC,Q,EAAoB;MAC7D,OACE7B,KAAA,CAAA8B,aAAA;QACEC,GAAG,EAAEJ,IADP;QAEEtB,SAAS,sCAAA2B,MAAA,CAAsCL,IAAtC,CAFX;QAGEA,IAAI,EAAC,QAHP;QAIEM,KAAK,EAAEL,KAJT;QAKEM,OAAO,EAAEL;MALX,EADF;IASD;;;8BAES;MACR,IAAI,CAAC,KAAKM,KAAL,CAAWvB,UAAhB,EAA4B;QAC1B,OAAO,IAAP;MACD;MAHO,IAKDP,SALC,GAKY,KAAKc,KALjB,CAKDd,SALC;MAAA,IAMDM,YANC,GAMe,KAAKwB,KANpB,CAMDxB,YANC;MAQR,IAAMgB,IAAI,GAAGhB,YAAY,GAAG,QAAH,GAAc,YAAvC;MAEA,OACEX,KAAA,CAAA8B,aAAA;QAAKzB,SAAS,uCAAA2B,MAAA,CAAuC3B,SAAvC,CAAd;QAAkE+B,GAAG,EAAE,KAAKC;MAA5E,GACG,KAAKC,aAAL,CAAmBX,IAAnB,EAAyB,mBAAzB,EAA8C,KAAKT,kBAAnD,CADH,CADF;IAKD;;;EA/E4CnB,W;gBAA1BW,iB,eAKAR,S;gBALAQ,iB,kBAMGD,Y;SANHC,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}