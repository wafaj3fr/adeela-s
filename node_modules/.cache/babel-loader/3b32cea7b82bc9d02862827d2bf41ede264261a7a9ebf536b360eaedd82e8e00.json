{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport MapState from './map-state';\nimport { LinearInterpolator } from './transition';\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nimport debounce from './debounce';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar ZOOM_ACCEL = 0.01;\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend', 'pinchcancel'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nvar MapController = function () {\n  function MapController() {\n    var _this = this;\n    _classCallCheck(this, MapController);\n    _defineProperty(this, \"events\", []);\n    _defineProperty(this, \"mapState\", void 0);\n    _defineProperty(this, \"onViewportChange\", void 0);\n    _defineProperty(this, \"onStateChange\", void 0);\n    _defineProperty(this, \"mapStateProps\", void 0);\n    _defineProperty(this, \"eventManager\", void 0);\n    _defineProperty(this, \"scrollZoom\", true);\n    _defineProperty(this, \"dragPan\", true);\n    _defineProperty(this, \"dragRotate\", true);\n    _defineProperty(this, \"doubleClickZoom\", true);\n    _defineProperty(this, \"touchZoom\", true);\n    _defineProperty(this, \"touchRotate\", false);\n    _defineProperty(this, \"keyboard\", true);\n    _defineProperty(this, \"_state\", {\n      isDragging: false\n    });\n    _defineProperty(this, \"_events\", {});\n    _defineProperty(this, \"_transitionManager\", new TransitionManager());\n    _defineProperty(this, \"setState\", function (newState) {\n      Object.assign(_this._state, newState);\n      if (_this.onStateChange) {\n        _this.onStateChange(_this._state);\n      }\n    });\n    this.handleEvent = this.handleEvent.bind(this);\n    this._onWheelEnd = debounce(this._onWheelEnd, 100);\n  }\n  _createClass(MapController, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.mapState = this.getMapState();\n      switch (event.type) {\n        case 'panstart':\n          return this._onPanStart(event);\n        case 'panmove':\n          return this._onPan(event);\n        case 'panend':\n          return this._onPanEnd(event);\n        case 'pinchstart':\n          return this._onPinchStart(event);\n        case 'pinchmove':\n          return this._onPinch(event);\n        case 'pinchcancel':\n        case 'pinchend':\n          return this._onPinchEnd(event);\n        case 'doubletap':\n          return this._onDoubleTap(event);\n        case 'wheel':\n          return this._onWheel(event);\n        case 'keydown':\n          return this._onKeyDown(event);\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n        x = _event$offsetCenter.x,\n        y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var extraState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n      var newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n      var viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n      if (viewStateChanged) {\n        this.onViewportChange(newViewport, extraState, oldViewport);\n      }\n      this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onViewportChange = options.onViewportChange,\n        onStateChange = options.onStateChange,\n        _options$eventManager = options.eventManager,\n        eventManager = _options$eventManager === void 0 ? this.eventManager : _options$eventManager,\n        _options$isInteractiv = options.isInteractive,\n        isInteractive = _options$isInteractiv === void 0 ? true : _options$isInteractiv,\n        _options$scrollZoom = options.scrollZoom,\n        scrollZoom = _options$scrollZoom === void 0 ? this.scrollZoom : _options$scrollZoom,\n        _options$dragPan = options.dragPan,\n        dragPan = _options$dragPan === void 0 ? this.dragPan : _options$dragPan,\n        _options$dragRotate = options.dragRotate,\n        dragRotate = _options$dragRotate === void 0 ? this.dragRotate : _options$dragRotate,\n        _options$doubleClickZ = options.doubleClickZoom,\n        doubleClickZoom = _options$doubleClickZ === void 0 ? this.doubleClickZoom : _options$doubleClickZ,\n        _options$touchZoom = options.touchZoom,\n        touchZoom = _options$touchZoom === void 0 ? this.touchZoom : _options$touchZoom,\n        _options$touchRotate = options.touchRotate,\n        touchRotate = _options$touchRotate === void 0 ? this.touchRotate : _options$touchRotate,\n        _options$keyboard = options.keyboard,\n        keyboard = _options$keyboard === void 0 ? this.keyboard : _options$keyboard;\n      this.onViewportChange = onViewportChange;\n      this.onStateChange = onStateChange;\n      if (!this.mapStateProps || this.mapStateProps.height !== options.height) {\n        this.updateViewport(new MapState(options));\n      }\n      this.mapStateProps = options;\n      this._transitionManager.processViewportChange(Object.assign({}, options, {\n        onStateChange: this.setState\n      }));\n      if (this.eventManager !== eventManager) {\n        this.eventManager = eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this2 = this;\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this2._events[eventName] !== enabled) {\n            _this2._events[eventName] = enabled;\n            if (enabled) {\n              _this2.eventManager.on(eventName, _this2.handleEvent);\n            } else {\n              _this2.eventManager.off(eventName, _this2.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      return this.isFunctionKeyPressed(event) || event.rightButton ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      var newMapState = this.mapState.panEnd().rotateEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.pan({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n      var deltaX = event.deltaX,\n        deltaY = event.deltaY;\n      var _this$getCenter = this.getCenter(event),\n        _this$getCenter2 = _slicedToArray(_this$getCenter, 2),\n        centerY = _this$getCenter2[1];\n      var startY = centerY - deltaY;\n      var _this$mapState$getVie = this.mapState.getViewportProps(),\n        width = _this$mapState$getVie.width,\n        height = _this$mapState$getVie.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      var newMapState = this.mapState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isZooming: true\n      });\n      this._onWheelEnd();\n      return true;\n    }\n  }, {\n    key: \"_onWheelEnd\",\n    value: function _onWheelEnd() {\n      this.setState({\n        isZooming: false\n      });\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._state.startPinchRotation = event.rotation;\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n      var newMapState = this.mapState;\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        var startPinchRotation = this._state.startPinchRotation;\n        newMapState = newMapState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }));\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n      var funcKey = this.isFunctionKeyPressed(event);\n      var mapStateProps = this.mapStateProps;\n      var newMapState;\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - 2\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - 1\n            });\n          }\n          break;\n        case 187:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + 2\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + 1\n            });\n          }\n          break;\n        case 37:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing - 15\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [100, 0],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 39:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing + 15\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [-100, 0],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 38:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch + 10\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, 100],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 40:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch - 10\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, -100],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        default:\n          return false;\n      }\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]);\n  return MapController;\n}();\nexport { MapController as default };","map":{"version":3,"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","debounce","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","MapController","_this","_classCallCheck","_defineProperty","isDragging","newState","Object","assign","_state","onStateChange","handleEvent","bind","_onWheelEnd","event","mapState","getMapState","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","_event$offsetCenter","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","newMapState","extraProps","arguments","length","undefined","extraState","oldViewport","getViewportProps","newViewport","viewStateChanged","keys","some","key","onViewportChange","setState","getInteractiveState","overrides","mapStateProps","options","_options$eventManager","eventManager","_options$isInteractiv","isInteractive","_options$scrollZoom","scrollZoom","_options$dragPan","dragPan","_options$dragRotate","dragRotate","_options$doubleClickZ","doubleClickZoom","_options$touchZoom","touchZoom","_options$touchRotate","touchRotate","_options$keyboard","keyboard","height","updateViewport","_transitionManager","processViewportChange","_events","toggleEvents","events","eventNames","enabled","_this2","forEach","eventName","on","off","pos","getCenter","panStart","rotateStart","isFunctionKeyPressed","rightButton","_onPanRotate","_onPanMove","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","_this$getCenter","_this$getCenter2","_slicedToArray","centerY","startY","_this$mapState$getVie","width","deltaScaleX","deltaScaleY","Math","abs","min","max","rotate","preventDefault","delta","scale","exp","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","around","funcKey","keyCode","bearing","startPos","pitch"],"sources":["/home/hp/adeela_map/adeela/node_modules/react-map-gl/src/utils/map-controller.js"],"sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport debounce from './debounce';\n\nimport type {MjolnirEvent} from 'mjolnir.js';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: (t: number) => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend', 'pinchcancel'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events: Array<string> = [];\n  mapState: MapState;\n  onViewportChange: Function;\n  onStateChange: Function;\n  mapStateProps: any;\n  eventManager: any;\n  scrollZoom: boolean = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard: boolean = true;\n\n  _state: any = {\n    isDragging: false\n  };\n  _events: any = {};\n  _transitionManager: TransitionManager = new TransitionManager();\n\n  constructor() {\n    (this: any).handleEvent = this.handleEvent.bind(this);\n    (this: any)._onWheelEnd = debounce(this._onWheelEnd, 100);\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event: MjolnirEvent) {\n    this.mapState = this.getMapState();\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchcancel':\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event: MjolnirEvent): Array<number> {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  setState = (newState: any) => {\n    Object.assign(this._state, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  };\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState: MapState, extraProps: any = {}, extraState: any = {}) {\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, extraState, oldViewport);\n    }\n\n    this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n  }\n\n  getMapState(overrides?: any): MapState {\n    return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options: any) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    if (!this.mapStateProps || this.mapStateProps.height !== options.height) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n\n    this.mapStateProps = options;\n    // Update transition\n    this._transitionManager.processViewportChange(\n      Object.assign({}, options, {\n        onStateChange: this.setState\n      })\n    );\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames: Array<string>, enabled: boolean) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event: MjolnirEvent) {\n    return this.isFunctionKeyPressed(event) || event.rightButton\n      ? this._onPanRotate(event)\n      : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.panEnd().rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event: MjolnirEvent) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event: MjolnirEvent) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.mapState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newMapState = this.mapState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event: MjolnirEvent) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isZooming: true});\n    // Wheel events are discrete, let's wait a little before resetting isZooming\n    this._onWheelEnd();\n    return true;\n  }\n\n  _onWheelEnd() {\n    this.setState({isZooming: false});\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event: MjolnirEvent) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newMapState = newMapState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event: MjolnirEvent) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      })\n    );\n    return true;\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event: MjolnirEvent) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 1});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 1});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, 100], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -100], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}